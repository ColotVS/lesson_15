public class lesson_15_40 {
    //Вывод стек-трейса при обработке ошибок

    //Почему же список вызовов методов назвали StackTrace?
    //Да потому, что если представить список методов в виде стопки листов с именами методов,
    //при вызове очередного метода на эту стопку кладется лист с именем метода, на него — следующий, и т.д.
    //Когда метод завершается, лист с верха стопки удаляется. Нельзя удалить лист из середины стопки, не удалив все листы,
    //лежащие в нем — нельзя прекратить работу метода в цепочке вызовов, не завершив все методы, вызванные им.

    //Исключения
    //Еще одно интересное применение стека — обработка исключений.
    //Когда в программе происходит ошибка и создается исключение, в него записывается текущий stack trace:
    //массив, состоящий из списка методов начиная с метода main и заканчивая методом, где произошла ошибка.
    //Там даже есть строка, в которой было создано исключение!
    //Этот stack trace ошибки хранится внутри исключения и может быть легко извлечен из нее с помощью метода:
    //StackTraceElement[] getStackTrace()

    //Пример:
    //try
    //{
    //   // тут может возникнуть исключение
    //}
    //catch(Exception e)                                    Захватываем исключение
    //{
    //   StackTraceElement[] methods = e.getStackTrace()    Получаем из него стек-трейс в момент возникновения ошибки.
    //}

    //Это метод класса Throwable, а значит, все его классы-наследники (т.е. вообще все исключения), имеют метод getStackTrace().

    //Печать стек-трейса ошибки
    //Кстати, у класса Throwable есть еще один метод для работы со stack-trace:
    //он выводит в консоль всю информацию по stack trace, который хранится внутри исключения.
    //Он так и называется printStackTrace().
    //Вызвать его можно у любого исключения, что очень удобно.

    //Пример:
    //try
    //{
    //   // тут может возникнуть исключение
    //}
    //catch(Exception e)
    //{
    //   e.printStackTrace();
    //}

    //В методе main перехвати исключение и выведи его стектрейс.

    public static void main(String[] args) {
        try {
            dangerousMethod();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    static void dangerousMethod() throws Exception {
        throw new Exception("Mu-ha-ha!");
    }
}
